components:
  schemas:
    PostalCode:
      description: Postal code and name for municipalities covered by Anidia
      properties:
        postalCode:
          description: Postal Code
          type: string
        municipalityName:
          description: Municipality name
          type: string
        municipalityId:
          description: INE Municipality identifier
          type: string
        provinceId:
          description: Municipality name (2 first digits from postal code)
          type: string
      type: object
    Address:
      description: All the information about an address from Anidia CRM
      properties:
        kind:
          description: Type of the address (street, avenue...)
          type: string
        name:
          description: Name of the address
          type: string
    Estate:
      description: All the information about an estate
      properties:
        addressKind:
          description: Type of the address (street, avenue...)
          type: string
        addressName:
          description: Name of the address
          type: string
        number:
          description: Number of the gate
          type: string
        annex:
          description: Annex to the gate number (e.g BIS in 2 BIS)
          type: string
        gateId:
          description: Unique identifier of the gate
          type: string
    Property:
      description: All the information about the house in which someone lives
      properties:
        address:
          description: Full address for the property
          type: string
        propertyId:
          description: Property unique identifier
          type: string
        block:
          description: Block of the property (e.g. 2)
          type: string
        ladder:
          description: Ladder of the property (e.g. Izq)
          type: string
        floor:
          description: Floor of the property (e.g. 2º)
          type: string
        door:
          description: Door in the flor of the property (e.g. C)
          type: string
        status:
          description: Status of the property
          type: string
        contractStatus:
          description: Status of the contract for this property
          type: string
    Lead:
      description: Information about a lead to be sent to CRM
      properties:
        personalData:
          description: Personal information of the Lead
          $ref: "#/definitions/PersonalData"
    PersonalData:
      description: Personal information of the Lead
      properties:
        firstName:
          description: First name of the lead
          type: string
        lastName:
          description: Last name of the lead
          type: string
        email:
          description: Email of the lead
          type: string
        phone:
          description: Phone (including international prefix)
          type: string
        prodInterest:
          description: Product of Interest (gas, solar, mantenimiento)
          type: string
          enum: [gas, solar, mantenimiento]
        acceptNotCom:
          description: Wether the lead has accepted commercial communications
          type: boolean
        postalCode:
          description: Postal Code of the Lead
          $ref: "#/definitions/PostalCode"
        estate:
          description: Estate of the lead
          $ref: "#/definitions/Estate"
        property:
          description: Full property of the Lead
          $ref: "#/definitions/Property"
    GasBudgetRequest:
      description: The required information to calculate a Gas Budget
      properties:
        postalCode:
          description: Postal Code of the client
          type: string
        houseType:
          description: Kind of house
          type: string
          enum: ["Unifamiliar", "Bloque de pisos"]
        propertyMeters:
          description: Size of the property in meters
          type: string
          enum: [ "Hasta 100m2", "De 100m2 a 180m2", "Mas de 180m2" ]
        staysNumber:
          description: Number of rooms
          type: integer
        bathroomNumber:
          description: Number of bathrooms
          type: integer
        floorNumber:
          description: Number of floors in the property
          type: integer
        gasNaturalUse:
          description: Intented use of the gas
          type: string
          enum: ["solo ACS", "ACS+Cocina", "ACS+Calefacción", "ACS+Cocina+Calefacción"]
        acsUse:
          description: Intended use for ACS
          type: string
          enum: ["No Procede", "Termo eléctrico", "Butano", "Propano", "Gasóleo", "Carbón", "Otro"]
        kitchenUse:
          description: Intended use for the Kitchen
          type: string
          enum:  ["No Procede", "Eléctrico", "Butano", "Propano", "Gasóleo", "Carbón", "Otro"]
        heatingUse:
          description: Intended use of heating
          type: string
          enum: [ "No Procede", "Radiadores eléctricos", "Butano", "Propano", "Gasóleo", "Carbón", "Otro" ]
        personsWater:
          description: Number of persons that use the waters
          type: string
          enum: [ "Hasta 2", "Entre 3-4", "Más de 4" ]
        boilerLocation:
          description: Location of the boiler
          type: string
          enum: [ "Lavadero/Terraza", "Cocina", "Baño" ]
        metersBoilerToWindow:
          description: Distance between the boiler and the window
          type: integer
        metersWaterIntake:
          description: Distance to the water intake
          type: string
          enum: ["m.0", "m.1", "m.2", "m.3", "m.4"]
        hasVentilationGrill:
          description: Has the client a ventilation grill?
          type: boolean
        controllHeatingFloor:
          description: Has the client controlled heating in the whole floor?
          type: boolean
        connectDeviceToKitchen:
          description: Has the client a connect device in the kitchen?
          type: boolean
        convertDeviceKitchen:
          description: Has the client a convert device in the kitchen?
          type: boolean
        radiatorsBathroom:
          description: Number of the radiators in the bathroom.
          type: integer
    GasBudget:
      description: Information about the gas budget sent by Solusoft API
      properties:
        proposedPack:
          description: Title of the pack
          type: string
        equipment:
          description: Equipment included in the budget
          type: string
        baseBudget:
          description: Base price of the budget
          type: string
        bonus:
          description: Discount
          type: string
        totalBudget:
          description: Total Price without VAT.
          type: string
        vat:
          description: VAT amount
          type: string
        totalPrice:
          description: Total price with VAT
          type: string
        metersBoilerToWindow:
          description: Distance between the boiler and the window
          $ref: "#/definitions/GasBudgetExtra"
        metersWaterIntake:
          description: Distance to the water intake
          $ref: "#/definitions/GasBudgetExtra"
        hasVentilationGrill:
          description: Has the client a ventilation grill?
          $ref: "#/definitions/GasBudgetExtra"
        controllHeatingFloor:
          description: Has the client controlled heating in the whole floor?
          $ref: "#/definitions/GasBudgetExtra"
        connectDeviceToKitchen:
          description: Has the client a connect device in the kitchen?
          $ref: "#/definitions/GasBudgetExtra"
        convertDeviceKitchen:
          description: Has the client a convert device in the kitchen?
          $ref: "#/definitions/GasBudgetExtra"
        radiatorsBathroom:
          description: Number of the radiators in the bathroom.
          $ref: "#/definitions/GasBudgetExtra"
        extraTotalPrice:
          description: Total price for all the extras
          type: string
    GasBudgetExtra:
      description: Information about some extra from the gas budget
      properties:
        value:
          description: Detail of the extra
          type: string
        price:
          description: Price for the extra
          type: string

    Sample:
      description: A sample entity
      properties:
        name:
          description: The sample name.
          type: string
        id:
          description: The sample ID.
          type: integer
      type: object
info:
  description: "Sample API"
  license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  title: "My Sample API for VUE"
  version: v1.0
openapi: 3.0.1
paths:
  "/gas-budgets":
    post:
      operationId: postGasBudget
      summary: Create a Gas Budget using Solusoft API
      description: Converts all the information into a format usable by Solusoft and returns the response
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/GasBudgetRequest"
            application/xml:
              schema:
                $ref: "#/components/schemas/GasBudgetRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GasBudget"
            application/xml:
              schema:
                $ref: "#/components/schemas/GasBudget"
          description: The budget has been created
  "/leads":
    post:
      operationId: postLead
      summary: Create a Lead in CRM
      description: Collects the lead information and send it to CRM
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lead"
            application/xml:
              schema:
                $ref: "#/components/schemas/Lead"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lead"
            application/xml:
              schema:
                $ref: "#/components/schemas/Lead"
          description: The lead has been saved in CRM
  "/properties/{gateId}":
    get:
      operationId: getPropertiesGatePage
      summary: Get all properties for an estate
      description: Get all the properties for the estate with the gate Id from Anidia CRM
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "gateId"
        in: "path"
        description: "Gate Id of the estate in CRM"
        required: true
        schema:
          type: "string"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Property"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Property"
          description: ""
      tags: ["Property"]
  "/estates/{municipalityId}/{postalCode}/{addressKind}/{addressName}":
    get:
      operationId: getEstatesAddressNamePage
      summary: Get all estates for an address
      description: Get all the estates for a whole address from Anidia CRM
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "municipalityId"
        in: "path"
        description: "INE Municipality identifier of the address"
        required: true
        schema:
          type: "string"
      - name: "postalCode"
        in: "path"
        description: "Postal Code of the address"
        required: true
        schema:
          type: "string"
      - name: "addressKind"
        in: "path"
        description: "Kind of the address"
        required: true
        schema:
          type: "string"
      - name: "addressName"
        in: "path"
        description: "Name of the address"
        required: true
        schema:
          type: "string"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Estate"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Estate"
          description: ""
      tags: ["Estate"]
  "/addresses/{municipalityId}/{postalCode}":
    get:
      operationId: getAddressesPostalCodePage
      summary: Get all addresses for a municipality and postal code
      description: Get all the addresses for a municipality and postal code from Anidia CRM
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "municipalityId"
        in: "path"
        description: "INE Municipality identifier of the addresses"
        required: true
        schema:
          type: "string"
      - name: "postalCode"
        in: "path"
        description: "Postal Code of the addresses"
        required: true
        schema:
          type: "string"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Address"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Address"
          description: ""
      tags: ["Address"]

  "/postal-codes":
    get:
      operationId: getPostalCodesPage
      summary: Get all postal codes
      description: Get all the postal codes from the Anidia database
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostalCode"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostalCode"
          description: ""
      tags: ["PostalCode"]

  "/samples/{sampleId}":
    get:
      operationId: getSample
      parameters:
        - in: path
          name: sampleId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
            application/xml:
              schema:
                $ref: "#/components/schemas/Sample"
          description: ""
      tags: ["Sample"]